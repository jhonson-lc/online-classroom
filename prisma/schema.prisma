// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  displayName   String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  classrooms    Classroom[] @relation("Classroom")
  enrolledIn    Classroom[] @relation("EnrolledIn")
  submissions   Submission[]
  ratings    Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id          String       @id @default(cuid())
  name        String
  teacher     User         @relation("Classroom", fields: [userId], references: [id])
  userId      String
  students    User[] @relation("EnrolledIn")
  ratings    Rating[]
  assignments Assignment[]
  description String @default("no description provided")
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
}

model Assignment {
  id          String    @id @default(cuid())
  number      Int       @default(autoincrement())
  name        String
  description String
  attachments Attachment[]
  dueDate String @default("2022-09-30T00:00:00Z")
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  submissions Submission[]
}

model Submission {
  id          String    @id @default(cuid())
  filename    String
  studentId   String 
  student     User @relation(fields: [studentId], references: [id], onDelete: Cascade) 
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  grade Float?
}

model Rating {
    id          String    @id @default(cuid())
    studentId String
    classroomId String
    amount Int
    student     User @relation(fields: [studentId], references: [id], onDelete: Cascade) 
    classroom  Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade) 
}